---
description: 
globs: 
alwaysApply: true
---
# ローポリ画像生成プロジェクト計画

このプロジェクトでは、指定された画像をローポリ（三角形のみで再構成）アートに変換します。

## 基本方針

1.  **点の配置**: 画像の面積に応じて密度 (`POINTS_DENSITY`) を調整し、ランダムに点を配置します。具体的には、画像の総面積に `POINTS_DENSITY` を乗じた数を点の数とし、最低でも一定数（現在は50点）の点が打たれるようにしています。 ([main.ts](mdc:main.ts) の `generateRandomPoints` 関数および `POINTS_DENSITY` 定数を参照)
2.  **三角形分割**: 配置された点を利用して、`delaunator` ライブラリを使用しドロネー三角形分割を行います。 ([main.ts](mdc:main.ts) を参照)
3.  **色計算**: 各三角形の重心を計算し、その重心位置にある画像のピクセルの色を三角形の代表色として取得します。画像ファイルの読み込みとピクセルデータの取得には `@unpic/pixels` ライブラリの `getPixels` 関数と `getFormat` 関数を使用します。 ([main.ts](mdc:main.ts) の `getTriangleColor` 関数を参照)
4.  **出力**: 生成されたローポリ画像を `output.svg` というファイル名でSVG形式で保存します。 ([main.ts](mdc:main.ts) の `generateSvg` 関数を参照)

## 技術スタック

-   プログラミング言語: TypeScript
-   実行環境: Deno
-   ライブラリ:
    -   `delaunator` (npm:delaunator@5.0.0): ドロネー三角形分割用 ([deno.json](mdc:deno.json) を参照)
    -   `@unpic/pixels` (jsr:@unpic/pixels): 画像のデコード、ピクセルデータ取得用 ([deno.json](mdc:deno.json) を参照)

## 画像の指定方法

変換対象の画像パスは、環境変数 `IMAGE_PATH` から読み取ります。

## 将来的な拡張（差し替え可能な部分）

以下の要素は、将来的に別のアルゴリズムや手法に差し替えられるように実装することを念頭に置きます。

-   点の配置方法（例: エッジ検出に基づく配置、より高度な密度調整）
-   三角形分割アルゴリズム（他のライブラリや自前実装の可能性）
-   三角形の色計算方法（例: 三角形内の全ピクセルの平均色、メディアンカットなど）
-   出力形式（例: PNG, JPEG, WebGLでのインタラクティブ表示）
